name: Run tests

on: [pull_request]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          tools: composer
        env:
          fail-fast: true

      - name: Software versions
        id: versions
        uses: cafuego/command-output@main
        with:
          run: |
            php --version && composer --version

      - name: Checkout Code
        id: checkout
        uses: actions/checkout@v3

      - name: Composer Validate
        id: validate
        uses: cafuego/command-output@main
        with:
          run: |
            composer validate
        env:
          fail-fast: true

      - name: Code Lint
        id: lint
        uses: cafuego/command-output@main
        with:
          run: |
            test ! -d ./html/modules/custom || find -L ./html/modules/custom -iregex '.*\.\(php\|module\|inc\|install\)$' -print0 | xargs -0 -n 1 -P 4 php -l
        env:
          fail-fast: true

      - name: Configure AWS Credentials
        id: aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Public ECR
        id: aws-login
        uses: docker/login-action@v2.1.0
        with:
          registry: public.ecr.aws
          username: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build Image
        id: build
        uses: cafuego/command-output@main
        with:
          run: |
            make
        env:
          fail-fast: true

      - name: Setup Environment
        id: docker
        uses: cafuego/command-output@main
        with:
          run: |
            docker-compose -f tests/docker-compose.yml up -d
            sleep 10
            docker ps -a
            docker-compose -f tests/docker-compose.yml exec -w /srv/www -T drupal composer install
        env:
          fail-fast: true

      - name: Install Environment
        id: install
        uses: cafuego/command-output@main
        with:
          run: |
            docker-compose -f tests/docker-compose.yml exec -T drupal drush -y si --existing-config
        env:
          fail-fast: true

      - name: PHPCS
        id: phpcs
        uses: cafuego/command-output@main
        with:
          run: |
            docker-compose -f tests/docker-compose.yml exec -u appuser -w /srv/www -T drupal phpcs -p --report=full --standard=phpcs.xml ./html/modules/custom
        env:
          fail-fast: true

      - name: Post Comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Composer Validate \`${{ steps.validate.outcome }}\`
            #### PHP Lint \`${{ steps.lint.outcome }}\`
            #### Docker Build \`${{ steps.build.outcome }}\`
            #### Environment Setup \`${{ steps.docker.outcome }}\`
            #### Site Install \`${{ steps.install.outcome }}\`
            #### PHP Code Sniffer \`${{ steps.phpcs.outcome }}\`

            <details><summary>Software Versions</summary>

            \`\`\`${{ steps.versions.outputs.stdout }}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Slack Success Notification
        id: slack_success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '${{ secrets.SLACK_CHANNEL }}'
          payload: |
            {
              "text": "Tests passed for a pull request on ${{ github.repository }}",
              "attachments": [
                {
                  "color": "#00FF00",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Pull request by @${{ github.triggering_actor }} to merge _${{ github.head_ref }}_ into _${{ github.base_ref }}_ on <${{ github.repositoryUrl }}|${{ github.repository }}> passed tests (<${{ github.event.pull_request.html_url }}|Review>)"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Failure Notification
        id: slack_failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '${{ secrets.SLACK_CHANNEL }}'
          payload: |
            {
              "text": "Tests failed for a pull request on ${{ github.repository }}",
              "attachments": [
                {
                  "color": "#FF0000",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Pull request by @${{ github.triggering_actor }} to merge _${{ github.head_ref }}_ into _${{ github.base_ref }}_ on <${{ github.repositoryUrl }}|${{ github.repository }}> failed tests (<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Review>)"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
