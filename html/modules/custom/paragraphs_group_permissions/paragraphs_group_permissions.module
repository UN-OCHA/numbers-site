<?php

/**
 * @file
 * Paragraph group permissions.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupRelationship;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_module_implements_alter().
 */
function paragraphs_group_permissions_module_implements_alter(&$implementations, $hook) {
  // Overwrite implementations.
  if (isset($implementations['paragraphs_group_permissions']) && isset($implementations['paragraphs_type_permissions'])) {
    $saved = $implementations['paragraphs_type_permissions'];
    unset($implementations['paragraphs_type_permissions']);

    if ($hook !== 'paragraph_access' && $hook != 'paragraph_create_access') {
      $implementations['paragraphs_type_permissions'] = $saved;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_access() for entity type "paragraph".
 */
function paragraphs_group_permissions_paragraph_access(ParagraphInterface $entity, $operation, AccountInterface $account) {
  $permissions = &drupal_static(__FUNCTION__, []);

  if (!in_array($operation, ['view', 'update', 'delete'], TRUE)) {
    // If there was no type to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return AccessResult::neutral();
  }

  // Set static cache id to use the type machine name.
  $type = $entity->getType();

  if ($operation == 'view' && !$entity->status->value) {
    return AccessResult::forbidden();
  }

  // If we've already checked access for this type, user and op, return from
  // cache.
  if (isset($permissions[$account->id()][$type][$operation])) {
    return $permissions[$account->id()][$type][$operation];
  }

  // Walk up all nested paragraphs.
  $parent = $entity->getParentEntity();
  $safety = 10;
  while ($safety-- > 0 && $parent && $parent::class === 'Drupal\paragraphs\Entity\Paragraph') {
    /** @var \Drupal\paragraphs\Entity\Paragraph $parent */
    $parent = $parent->getParentEntity();
  }

  if (!$parent) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\Group */
  $group = NULL;

  // If we are on page, get the group.
  if (get_class($parent) == 'Drupal\node\Entity\Node') {
    $group_content_array = GroupRelationship::loadByEntity($parent);
    $group_content = reset($group_content_array);
    if ($group_content) {
      $group = $group_content->getGroup();
    }
    else {
      return AccessResult::neutral();
    }
  }
  else {
    $group = $parent;
  }

  if (!$group) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Access\GroupPermissionCheckerInterface $group_permission_checker */
  $group_permission_checker = \Drupal::service('group_permission.checker');

  if ($account->hasPermission('bypass paragraphs type content access') || $account->hasPermission($operation . ' paragraph content ' . $type)) {
    $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
  }
  elseif ($group_permission_checker->hasPermissionInGroup($operation . ' paragraph content ' . $type, $account, $group)) {
    $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
  }
  else {
    $permissions[$account->id()][$type][$operation] = AccessResult::forbidden()->cachePerPermissions();
  }

  return $permissions[$account->id()][$type][$operation];
}

/**
 * Implements hook_ENTITY_TYPE_create_access() for entity type "paragraph".
 *
 * @see paragraphs_group_permissions_node_create_access
 */
function paragraphs_group_permissions_paragraph_create_access(AccountInterface $account = NULL, array $context = [], $entity_bundle = NULL) {
  $permissions = &drupal_static(__FUNCTION__, []);

  // Set static cache id to use the type machine name.
  $type = $entity_bundle;
  $operation = 'create';

  // If we've already checked access for this type, user and op, return from
  // cache.
  if (isset($permissions[$account->id()][$type][$operation])) {
    return $permissions[$account->id()][$type][$operation];
  }

  // If the current user has access to this type/op, return access allowed.
  if ($account->hasPermission('bypass paragraphs type content access') || $account->hasPermission($operation . ' paragraph content ' . $type)) {
    $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
    return $permissions[$account->id()][$type][$operation];
  }

  /** @var \Drupal\group\Access\GroupPermissionCheckerInterface $group_permission_checker */
  $group_permission_checker = \Drupal::service('group_permission.checker');

  // Get group from referer.
  $request = \Drupal::request();
  $referer = $request->headers->get('referer');
  if (strpos($referer, '/group/') !== FALSE) {
    $parts = explode('/', parse_url($referer, PHP_URL_PATH));
    // Group Id is after group string.
    $group_id = FALSE;
    foreach ($parts as $index => $part) {
      if ($part === 'group') {
        $group_id = $parts[$index + 1];
        break;
      }
    }

    if (!$group_id || !is_numeric($group_id)) {
      return AccessResult::neutral();
    }

    // Group permissions.
    $group = Group::load($group_id);
    if ($group_permission_checker->hasPermissionInGroup($operation . ' paragraph content ' . $type, $account, $group)) {
      $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
      return $permissions[$account->id()][$type][$operation];
    }

    $permissions[$account->id()][$type][$operation] = AccessResult::forbidden()->cachePerPermissions();
    return $permissions[$account->id()][$type][$operation];
  }

  /** @var \Drupal\group\GroupMembershipLoaderInterface */
  $group_membership_loader = \Drupal::service('group.membership_loader');
  $group_membership = $group_membership_loader->loadByUser($account);
  foreach ($group_membership as $group_membership) {
    if ($group_permission_checker->hasPermissionInGroup($operation . ' paragraph content ' . $type, $account, $group_membership->getGroup())) {
      $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
      return $permissions[$account->id()][$type][$operation];
    }
  }

  $permissions[$account->id()][$type][$operation] = AccessResult::forbidden()->cachePerPermissions();
  return $permissions[$account->id()][$type][$operation];
}

/**
 * Implements hook_ENTITY_TYPE_create_access() for entity type "node".
 */
function paragraphs_group_permissions_node_create_access(AccountInterface $account = NULL, array $context = [], $entity_bundle = NULL) {
  $permissions = &drupal_static(__FUNCTION__, []);

  // Set static cache id to use the type machine name.
  $type = $entity_bundle;
  $operation = 'create';

  // If we've already checked access for this type, user and op, return from
  // cache.
  if (isset($permissions[$account->id()][$type][$operation])) {
    return $permissions[$account->id()][$type][$operation];
  }

  // If the current user has access to this type/op, return access allowed.
  if ($account->hasPermission('bypass paragraphs type content access') || $account->hasPermission($operation . ' ' . $type . ' content')) {
    $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
    return $permissions[$account->id()][$type][$operation];
  }

  /** @var \Drupal\group\Access\GroupPermissionCheckerInterface $group_permission_checker */
  $group_permission_checker = \Drupal::service('group_permission.checker');

  // Get group from referer.
  $request = \Drupal::request();
  $referer = $request->headers->get('referer');
  if (strpos($referer, '/group/') !== FALSE) {
    $parts = explode('/', parse_url($referer, PHP_URL_PATH));
    // Group Id is after group string.
    $group_id = FALSE;
    foreach ($parts as $index => $part) {
      if ($part === 'group') {
        $group_id = $parts[$index + 1];
        break;
      }
    }

    if (!$group_id || !is_numeric($group_id)) {
      return AccessResult::neutral();
    }

    // Group permissions.
    $group = Group::load($group_id);
    if ($group_permission_checker->hasPermissionInGroup('create group_node:' . $type . ' entity', $account, $group)) {
      $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
      return $permissions[$account->id()][$type][$operation];
    }

    $permissions[$account->id()][$type][$operation] = AccessResult::forbidden()->cachePerPermissions();
    return $permissions[$account->id()][$type][$operation];
  }

  /** @var \Drupal\group\GroupMembershipLoaderInterface */
  $group_membership_loader = \Drupal::service('group.membership_loader');
  $group_membership = $group_membership_loader->loadByUser($account);
  foreach ($group_membership as $group_membership) {
    if ($group_permission_checker->hasPermissionInGroup('create group_node:' . $type . ' entity', $account, $group_membership->getGroup())) {
      $permissions[$account->id()][$type][$operation] = AccessResult::allowed()->cachePerPermissions();
      return $permissions[$account->id()][$type][$operation];
    }
  }

  $permissions[$account->id()][$type][$operation] = AccessResult::forbidden()->cachePerPermissions();
  return $permissions[$account->id()][$type][$operation];
}
