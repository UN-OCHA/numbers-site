diff --git a/src/Entity/ContainerManager.php b/src/Entity/ContainerManager.php
index 80fe83e..4f0264f 100644
--- a/src/Entity/ContainerManager.php
+++ b/src/Entity/ContainerManager.php
@@ -240,7 +240,7 @@ class ContainerManager implements ContainerManagerInterface {
       $directory = $this->config->get('uri');
       if (!empty($directory)) {
         // Remove any stale files (e.g. module update or machine name change).
-        return $this->fileSystem->deleteRecursive($directory . '/google_tag');
+        return $this->deleteFilesRecursive($directory . '/google_tag');
       }
     }

@@ -266,7 +266,7 @@ class ContainerManager implements ContainerManagerInterface {
     $directory = $container->snippetDirectory();
     $result = TRUE;
     if (!empty($directory) && is_dir($directory)) {
-      $result = $this->fileSystem->deleteRecursive($directory);
+      $result = $this->deleteFilesRecursive($directory);
     }

     $args = ['@count' => count($types), '%container' => $container->get('label')];
@@ -310,4 +310,35 @@ class ContainerManager implements ContainerManagerInterface {
     return TRUE;
   }

+
+  /**
+   * Helper that recursively deletes files under a directory.
+   *
+   * This is a simplified version of FileSystem::deleteRecursive() that skips
+   * skips directories. This means we module will not error out on NFS file
+   * locks when trying to delete files that are open on other nodes and also
+   * will not need to re-create directories after each cache clear.
+   *
+   * @param $path
+   *   The directory whose contents to delete.
+   *
+   */
+  private function deleteFilesRecursive($path) {
+    if (is_dir($path)) {
+      $dir = dir($path);
+      while (($entry = $dir->read()) !== FALSE) {
+        if ($entry == '.' || $entry == '..') {
+          continue;
+        }
+        $entry_path = $path . '/' . $entry;
+        $this->deleteFilesRecursive($entry_path);
+      }
+      return $dir->close();
+    }
+    else {
+      return $this->fileSystem->delete($path);
+    }
+    return FALSE;
+  }
+
 }
